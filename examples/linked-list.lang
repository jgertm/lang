(defmodule examples.linked-list)

(deftype IntList
  (| [:nil Unit]
     [:cons {Integer IntList}]))

(deftype (List T)
  (| [:nil Unit]
     [:cons {T (List T)}]))

(defn empty? [list]
  (match list
    ([:nil _] true)
    ([:cons _] false)))

(defn sum [list]
  (match list
    ([:nil _] 0)
    ([:cons {n tl}] (+ n (sum tl)))))

(defn fold
  [op init list]
  (match list
    ([:nil _] init)
    ([:cons {n tl}] (op n (fold op init tl)))))

(def sum* (fold + 0))

(defn main []
  (sum* [:cons {2 [:cons {12 [:nil nil]}]}]))
