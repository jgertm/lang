(defmodule lang.core
  (:skip-implicits))


(defmacro if
  [test tru fls]
  `(match ,test
     true ,tru
     false ,fls))


(defn id [x] x)


;;; typeclasses ----

(defclass (Show T)
  (show : (-> T String)))


(definstance (Show Bool)
  (show [b]
    (if b "true" "false")))

(def foo (show true))

(defn bar [x] (show x))


(definstance (Show Integer)
  (show [i]
    (. i (java.math.BigInteger/toString))))


(defclass (Eq T)
  (= : (-> T T Bool)))


(definstance (Eq Integer)
  (= [a b]
     (. (. a (java.math.BigInteger/equals b)) (java.lang.Boolean/valueOf))))


(definstance (Eq String)
  (= [a b]
     (. (. a (java.lang.String/equals b)) (java.lang.Boolean/valueOf))))


(defclass (Functor F)
  (map : (-> (-> A B) (F A) (F B))))
