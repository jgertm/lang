(defmodule lang.option
  (:import [lang.string :as string])) 


(deftype (Option T)
  (| [:none]
     [:some T]))


(defn default
  [option fallback]
  (match option
    [:none] fallback
    [:some value] value))


(definstance (Functor Option)
  (map [f option]
    (match option
      [:none]       [:none]
      [:some value] [:some (f value)])))


(definstance (Show (Option T))
  :when (Show T)
  (show [option]
    (match option
      [:none]     "[:none]"
      [:some val] (string/concat (string/concat "[:some" (show val)) "]"))))
